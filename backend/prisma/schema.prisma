// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  INGAME
  OFFLINE
}

enum Ladder {
  BEGINNER
  AMATEUR
  SEMI_PROFESSIONAL
  PROFESSIONAL
  WORLD_CLASS
  LEGENDARY
}

model User {
  id                    Int             @id @default(autoincrement())
  username              String          @unique
  login                 String          @unique
  email                 String          @unique
  password              String?
  fullname              String
  country               String
  phone                 String
  avatar                String
  twoFactorAuth         Boolean         @default(false)
  tfaSecret             String
  status                UserStatus      @default(OFFLINE)
  ladder                Ladder          @default(BEGINNER)
  rating                Int             @default(0)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  blocking              Block[]         @relation("blocking")
  blockers              Block[]         @relation("blocker")
  wins                  Int             @default(0)
  losses                Int             @default(0)
  mutedIn               Channel[]       @relation("mutedinChannels")
  bannedIn              Channel[]       @relation("bannedinChannels")
  kickedIn              Channel[]       @relation("kickedinChannels")
  adminIn               Channel[]       @relation("admininChannels")
  ownedChannels         Channel[]       @relation("ownedChannels")
  pinnedChannels        Channel[]       @relation("pinnedChannels")
  mutedChannels         Channel[]       @relation("mutedChannels")
  archivedChannels      Channel[]       @relation("archivedChannels")
  deletedChannels       Channel[]       @relation("deletedChannels")
  unreadChannels        Channel[]       @relation("unreadChannels")
  achievements          Achievement[]   @relation("AchievementPlayers")
  memberInChannels      ChannelMember[] @relation("memberInChannels1")
  sentMessages          Message[]       @relation("send")
  sentRequests          Friend[]        @relation("SentRequest")
  receivedRequests      Friend[]        @relation("ReceivedRequest")
  gamesWon              Game[]          @relation("winner")
  gamesLost             Game[]          @relation("loser")
  gamesAsPlayer1        Game[]          @relation("player1")
  gamesAsPlayer2        Game[]          @relation("player2")
  sentNotifications     Notification[]  @relation("sent")
  receivedNotifications Notification[]  @relation("received")
  winStreak             Int             @default(0)
  totalGames            Int             @default(0)
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friend {
  id         Int           @id @default(autoincrement())
  sender     User          @relation("SentRequest", fields: [senderId], references: [id])
  senderId   Int
  receiver   User          @relation("ReceivedRequest", fields: [receiverId], references: [id])
  receiverId Int
  status     RequestStatus @default(PENDING)
}

model Achievement {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  image       String?
  players     User[]  @relation("AchievementPlayers")
}

model Block {
  blocker    User @relation("blocker", fields: [blockerId], references: [id])
  blockerId  Int
  blocking   User @relation("blocking", fields: [blockingId], references: [id])
  blockingId Int

  @@id([blockerId, blockingId])
}

enum Visiblity {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum ChannelType {
  GROUP
  CONVERSATION
}

model Channel {
  id               Int             @id @default(autoincrement())
  name             String
  avatar           String
  visiblity        Visiblity       @default(PUBLIC)
  password         String?
  accessPassword   String?
  isacessPassword  Boolean         @default(false)
  owner            User            @relation("ownedChannels", fields: [userId], references: [id])
  pinnedFor        User[]          @relation("pinnedChannels")
  mutedFor         User[]          @relation("mutedChannels")
  archivedFor      User[]          @relation("archivedChannels")
  deletedFor       User[]          @relation("deletedChannels")
  unreadFor        User[]          @relation("unreadChannels")
  bannedUsers      User[]          @relation("bannedinChannels")
  mutedUsers       User[]          @relation("mutedinChannels")
  kickedUsers      User[]          @relation("kickedinChannels")
  adminUsers       User[]          @relation("admininChannels")
  userId           Int
  type             ChannelType     @default(GROUP)
  channelMembers   ChannelMember[] @relation("membersInChannels")
  createAt         DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  messages         Message[]       @relation("receive")
  lastMessage      String?         @default("")
  newMessagesCount Int?            @default(0)
}

enum Role {
  OWNER
  MEMEBER
  ADMIN
}

enum MemberStatus {
  MUTED
  BANNED
  ACTIVE
  LEFT
}

model ChannelMember {
  user             User         @relation("memberInChannels1", fields: [userId], references: [id])
  userId           Int
  channel          Channel      @relation("membersInChannels", fields: [channelId], references: [id])
  channelId        Int
  role             Role         @default(MEMEBER)
  status           MemberStatus @default(ACTIVE)
  banStartTime     DateTime?
  banDuration      Int?
  newMessagesCount Int?         @default(0)

  @@id([userId, channelId])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  receiver   Channel  @relation("receive", fields: [receiverId], references: [id])
  receiverId Int
  sender     User     @relation("send", fields: [senderId], references: [id])
  senderId   Int
  date       DateTime @default(now())
}

enum GameStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

model Game {
  id           Int        @id @default(autoincrement())
  player1      User       @relation("player1", fields: [player1Id], references: [id])
  player1Id    Int
  player2      User       @relation("player2", fields: [player2Id], references: [id])
  player2Id    Int
  winner       User?      @relation("winner", fields: [winnerId], references: [id])
  winnerId     Int?
  loser        User?      @relation("loser", fields: [loserId], references: [id])
  loserId      Int?
  date         DateTime   @default(now())
  player1Score Int        @default(0)
  player2Score Int        @default(0)
  status       GameStatus @default(IN_PROGRESS)
}

model Notification {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  url        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  seen       Boolean  @default(false)
  senderId   Int
  receiverId Int
  sender     User     @relation("sent", fields: [senderId], references: [id])
  receiver   User     @relation("received", fields: [receiverId], references: [id])
}
